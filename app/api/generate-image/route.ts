import { NextRequest, NextResponse } from 'next/server';

const RUNWAY_API_KEY = process.env.RUNWAY_API_KEY || 'Bpu5CScHECsobs0n7gJwnGLacwWOnHZv';
const RUNWAY_MODEL = process.env.RUNWAY_MODEL || 'runware:101@1';
const RUNWAY_API_URL = process.env.RUNWAY_API_URL || 'https://api.runwayml.com/v1/inference';

interface GenerateImageRequest {
  verse: string;
  ageGroup: string;
  style?: string;
}

function createImagePrompt(verse: string, ageGroup: string): string {
  const ageSpecificStyles = {
    '0-6': 'cute, colorful, child-friendly, simple shapes, bright colors, gentle, safe, friendly characters, soft lighting, cartoon style',
    '7-12': 'adventure, exciting, vibrant, imaginative, fantasy elements, heroic, magical, engaging, dynamic composition',
    '13-17': 'modern, contemporary, relatable, stylish, urban, artistic, expressive, sophisticated, current trends',
    'adult': 'mature, thoughtful, artistic, professional, elegant, meaningful, symbolic, refined, contemplative'
  };

  const style = ageSpecificStyles[ageGroup.toLowerCase() as keyof typeof ageSpecificStyles] || ageSpecificStyles.adult;

  return `Create a beautiful, inspiring image representing the Bible verse: "${verse}". 
Style: ${style}
The image should be family-friendly, biblically appropriate, and visually appealing.
Make it warm, welcoming, and suitable for religious education.
Avoid any dark or scary elements.
Use warm, inviting colors and positive imagery.`;
}

export async function POST(request: NextRequest) {
  try {
    const { verse, ageGroup, style }: GenerateImageRequest = await request.json();

    if (!verse || !ageGroup) {
      return NextResponse.json(
        { error: 'Verse and ageGroup are required' },
        { status: 400 }
      );
    }

    const prompt = createImagePrompt(verse, ageGroup);

    // Call Runway AI API
    const response = await fetch(RUNWAY_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${RUNWAY_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: RUNWAY_MODEL,
        prompt: prompt,
        width: 1024,
        height: 1024,
        num_outputs: 1,
        guidance_scale: 7.5,
        num_inference_steps: 50,
        seed: Math.floor(Math.random() * 1000000), // Random seed for variety
        negative_prompt: 'dark, scary, violent, inappropriate, adult content, scary characters, monsters, demons, blood, weapons'
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Runway AI API error:', response.status, errorText);
      throw new Error(`Runway AI API error: ${response.status}`);
    }

    const data = await response.json();
    
    if (!data.images || !data.images[0]) {
      throw new Error('No image generated by Runway AI');
    }

    // Return the generated image data
    return NextResponse.json({
      success: true,
      image: data.images[0],
      prompt: prompt,
      model: RUNWAY_MODEL,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Error generating image:', error);
    
    return NextResponse.json({
      success: false,
      error: 'Failed to generate image',
      details: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}
